% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Methods.R
\name{run_lncPro}
\alias{run_lncPro}
\title{Predict RNA-Protein Interaction Using lncPro Method}
\usage{
run_lncPro(
  seqRNA,
  seqPro,
  mode = c("prediction", "retrain", "feature"),
  args.RNAsubopt = NULL,
  args.Predator = NULL,
  path.RNAsubopt = "RNAsubopt",
  path.Predator = "Predator/predator",
  path.stride = "Predator/stride.dat",
  workDir.Pro = getwd(),
  prediction = c("original", "retrained"),
  retrained.model = NULL,
  label = NULL,
  positive.class = NULL,
  folds.num = 10,
  ntree = 3000,
  mtry.ratios = c(0.1, 0.2, 0.4, 0.6, 0.8),
  seed = 1,
  parallel.cores = 2,
  cl = NULL,
  ...
)
}
\arguments{
\item{seqRNA}{RNA sequences loaded by function \code{\link[seqinr]{read.fasta}} from \code{\link[seqinr]{seqinr-package}}.
Or a list of RNA/protein sequences.
RNA sequences will be converted into lower case letters.}

\item{seqPro}{protein sequences loaded by function \code{\link[seqinr]{read.fasta}} from \code{\link[seqinr]{seqinr-package}}.
Or a list of protein sequences.
Protein sequences will be converted into upper case letters.
Each sequence should be a vector of single characters.}

\item{mode}{a string. Set \code{"prediction"} to predict ncRNA-protein pairs and return prediction results;
set \code{"retrain"} to build a new random forest model using the input data;
set \code{"feature"} to return a data frame contains the extracted features.
Users can use the extracted features generated by \code{mode = "feature"} to train classifiers
with other machine learning algorithms. Default: \code{"prediction"}.}

\item{args.RNAsubopt, args.Predator}{string (in format such as "-N --pfScale 1.07") specifying additional arguments for "RNAsubopt" (except "-p") and "Predator" (except "-a" and "-b"). This is used when you want to control their behaviours. Arguments for "RNAsubopt" and "Predator" please refer to their manual. Default: \code{NULL}.}

\item{path.RNAsubopt, path.Predator}{a string specifying the location of "RNAsubopt" and "Predator" program.}

\item{path.stride}{a string specifying the location of file "stride.dat" required by program Predator.}

\item{workDir.Pro}{a string specifying the directory for temporary files used for process protein sequences.
The temp files will be deleted automatically when
the calculation is completed. If the directory does not exist, it will be created automatically.}

\item{prediction}{(only when \code{mode = "prediction"}) set \code{"original"} to use original lncPro algorithm,
or set \code{"retrained"} to call retrained model.
The retrained model is constructed with the same features as the original version, but random classifier is employed to
build the classifier.}

\item{retrained.model}{(only when \code{mode = "prediction"} and \code{prediction = "retrained"})
use the default model or a new retrained model to predict ncRNA-protein pairs?
If \code{NULL}, default machine learning model will be used. Or pass the model generated by this function
with parameter \code{"mode = retrain"}. Default: \code{NULL}. See examples below.}

\item{label}{a string or a vector of strings or \code{NULL}.
Optional when \code{mode = "prediction"} or \code{mode = "feature"}: used to give labels or notes to the output result.
Required when \code{mode = "retrain"}: must be a vector of strings that corresponds to input sequences.
Each string indicates the class of each input pair. Default: \code{NULL}.}

\item{positive.class}{(only when \code{mode = "retrain"}) \code{NULL} or a string used to indicate
which class is the positive class, Should be one
of the classes in \code{label} or leave \code{positive.class = NULL}.
In the latter case, the first class in \code{label} will be used
as the positive class. Default: \code{NULL}.}

\item{folds.num}{(only when \code{mode = "retrain"}) an integer indicates the number of folds for cross validation.
Default: \code{10} for 10-fold cross validation.}

\item{ntree}{integer, number of trees to grow. See \code{\link[randomForest]{randomForest}}.
Default: \code{3000}.}

\item{mtry.ratios}{(only when \code{mode = "retrain"}) used to indicate the ratios of \code{mtry} when tuning the random forest classifier.
\code{mtry} = ratio of mtry * number of features Default: \code{c(0.1, 0.2, 0.4, 0.6, 0.8)}.}

\item{seed}{(only when \code{mode = "retrain"}) an integer indicates the random seed for data splitting.}

\item{parallel.cores}{an integer that indicates the number of cores for parallel computation.
Default: \code{2}. Set \code{parallel.cores = -1} to run with all the cores. \code{parallel.cores} should be == -1 or >= 1.}

\item{cl}{parallel cores to be passed to this function.}

\item{...}{(only when \code{mode = "retrain"}) other parameters (except \code{ntree} and \code{mtry}) passed to \code{\link[randomForest]{randomForest}} function.}
}
\value{
If \code{mode = "prediction"}, this function returns a data frame that contains the predicted results.

If \code{mode = "retrain"}, this function returns a random forest classifier.

If \code{mode = "feature"}, this function returns a data frame that contains the extracted features.
}
\description{
This function can predict lncRNA/RNA-protein interactions using lncPro method. Model retraining and feature extraction are also supported.
Programs "RNAsubopt" from software "ViennaRNA Package" and "Predator" is required. Please also note that
"Predator" is only available on UNIX/Linux and 32-bit Windows OS.
}
\details{
The method is proposed by lncPro. This function, \code{runlncPro}, has
improved and fixed the original code.

\code{runlncPro} depends on the program "RNAsubopt" of software "ViennaRNA"
(\url{http://www.tbi.univie.ac.at/RNA/index.html}) and "Predator"
(\url{https://bioweb.pasteur.fr/packages/pack@predator@2.1.2}).

Parameter \code{path.RNAsubopt} can be simply defined as \code{"RNAsubopt"} as
default when the OS is UNIX/Linux. However, for some OS, such as Windows, users may
need to specify the \code{path.RNAsubopt} if the path of "RNAsubopt" haven't been
added in environment variables (e.g. \code{path.RNAsubopt = '"C:/Program Files/ViennaRNA/RNAsubopt.exe"'}).

Program "Predator" is only available on UNIX/Linux and 32-bit Windows OS.
}
\section{References}{

Lu Q, Ren S, Lu M, \emph{et al}.
Computational prediction of associations between long non-coding RNAs and proteins.
BMC Genomics 2013; 14:651
}

\examples{

\donttest{

# Following codes only show how to use this function
# and cannot reflect the genuine performance of tools or classifiers.

data(demoPositiveSeq)
seqRNA <- demoPositiveSeq$RNA.positive
seqPro <- demoPositiveSeq$Pro.positive

# Predicting ncRNA-protein pairs (you need to use your own paths):

path.RNAsubopt <- "RNAsubopt"
path.Predator <- "/mnt/external_drive_1/hansy/predator/predator"
path.stride <- "/mnt/external_drive_1/hansy/predator/stride.dat"
workDir.Pro <- "tmp"

Res_lncPro_1 <- run_lncPro(seqRNA = seqRNA, seqPro = seqPro, mode = "prediction",
                           path.RNAsubopt = path.RNAsubopt, path.Predator = path.Predator,
                           path.stride = path.stride, workDir.Pro = workDir.Pro,
                           prediction = "original", label = "lncPro_original",
                           parallel.cores = 10) # using original algorithm

Res_lncPro_2 <- run_lncPro(seqRNA = seqRNA, seqPro = seqPro, mode = "prediction",
                           path.RNAsubopt = path.RNAsubopt, path.Predator = path.Predator,
                           path.stride = path.stride, workDir.Pro = workDir.Pro,
                           prediction = "retrained", retrained.model = NULL,
                           label = "lncPro_retrained",
                           parallel.cores = 10) # using default rebuilt model

# Train a new model:

# Argument "label" which indicates the class of each input pair is required here.
# "label" should correspond to the classes of "seqRNA" and "seqPro".
# "positive.class" should be one of the classes in argument "label" or can be set as "NULL".
# In the latter case, the first label in "label" will be used as the positive class.
# Parameters of random forest, such as "replace", "nodesize", can be passed using "..." argument.

lncPro_model = run_lncPro(seqRNA = seqRNA, seqPro = seqPro, mode = "retrain",
                          path.RNAsubopt = path.RNAsubopt, path.Predator = path.Predator,
                          path.stride = path.stride, workDir.Pro = workDir.Pro,
                          label = rep(c("Interact", "Non.Interact"), each = 10),
                          positive.class = NULL, folds.num = 10,
                          ntree = 100, seed = 1, parallel.cores = 2, replace = FALSE)

# Predicting using new built model by setting "retrained.model = lncPro_model":

Res_lncPro_3 <- run_lncPro(seqRNA = seqRNA, seqPro = seqPro, mode = "prediction",
                           path.RNAsubopt = path.RNAsubopt, path.Predator = path.Predator,
                           path.stride = path.stride, workDir.Pro = workDir.Pro,
                           prediction = "retrained", retrained.model = lncPro_model,
                           label = rep(c("Interact", "Non.Interact"), each = 10),
                           parallel.cores = 10)

# Only extracting features:

lncPro_feature_df <- run_lncPro(seqRNA = seqRNA, seqPro = seqPro,
                                mode = "feature", path.RNAsubopt = path.RNAsubopt,
                                path.Predator = path.Predator, path.stride = path.stride,
                                workDir.Pro = workDir.Pro, label = "Interact",
                                parallel.cores = 10)

# Extracted features can be used to build classifiers using other machine learning
# algorithms, which provides users with more flexibility.

}

}
