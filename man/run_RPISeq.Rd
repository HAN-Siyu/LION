% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Methods.R
\name{run_RPISeq}
\alias{run_RPISeq}
\title{Predict RNA-Protein Interaction Using RPISeq Method}
\usage{
run_RPISeq(
  seqRNA,
  seqPro,
  mode = c("prediction", "retrain", "feature"),
  prediction = c("web", "retrained"),
  retrained.model = NULL,
  label = NULL,
  positive.class = NULL,
  folds.num = 10,
  ntree = 3000,
  mtry.ratios = c(0.1, 0.2, 0.4, 0.6, 0.8),
  seed = 1,
  parallel.cores = 2,
  cl = NULL,
  ...
)
}
\arguments{
\item{seqRNA}{RNA sequences loaded by function \code{\link[seqinr]{read.fasta}} from \code{\link[seqinr]{seqinr-package}}.
Or a list of RNA/protein sequences.
RNA sequences will be converted into lower case letters.}

\item{seqPro}{protein sequences loaded by function \code{\link[seqinr]{read.fasta}} from \code{\link[seqinr]{seqinr-package}}.
Or a list of protein sequences.
Protein sequences will be converted into upper case letters.
Each sequence should be a vector of single characters.}

\item{mode}{a string. Set \code{"prediction"} to predict ncRNA-protein pairs and return prediction results;
set \code{"retrain"} to build a new random forest model using the input data;
set \code{"feature"} to return a data frame contains the extracted features.
Users can use the extracted features generated by \code{mode = "feature"} to train classifiers
with other machine learning algorithms. Default: \code{"prediction"}.}

\item{prediction}{(only when \code{mode = "prediction"}) set \code{"web"} to use original web-based RPISeq algorithm (network is required),
or set \code{"retrained"} to call retrained model.}

\item{retrained.model}{(only when \code{mode = "prediction"} and \code{prediction = "retrained"})
use the default model or a new retrained model to predict ncRNA-protein pairs?
If \code{NULL}, default machine learning model will be used. Or pass the model generated by this function
with parameter \code{"mode = retrain"}. Default: \code{NULL}. See examples below.}

\item{label}{a string or a vector of strings or \code{NULL}.
Optional when \code{mode = "prediction"} or \code{mode = "feature"}: used to give labels or notes to the output result.
Required when \code{mode = "retrain"}: must be a vector of strings that corresponds to input sequences.
Each string indicates the class of each input pair. Default: \code{NULL}.}

\item{positive.class}{(only when \code{mode = "retrain"}) \code{NULL} or a string used to indicate
which class is the positive class, Should be one
of the classes in \code{label} or leave \code{positive.class = NULL}.
In the latter case, the first class in \code{label} will be used
as the positive class. Default: \code{NULL}.}

\item{folds.num}{(only when \code{mode = "retrain"}) an integer indicates the number of folds for cross validation.
Default: \code{10} for 10-fold cross validation.}

\item{ntree}{integer, number of trees to grow. See \code{\link[randomForest]{randomForest}}.
Default: \code{3000}.}

\item{mtry.ratios}{(only when \code{mode = "retrain"}) used to indicate the ratios of \code{mtry} when tuning the random forest classifier.
\code{mtry} = ratio of mtry * number of features Default: \code{c(0.1, 0.2, 0.4, 0.6, 0.8)}.}

\item{seed}{(only when \code{mode = "retrain"}) an integer indicates the random seed for data splitting.}

\item{parallel.cores}{an integer that indicates the number of cores for parallel computation.
Default: \code{2}. Set \code{parallel.cores = -1} to run with all the cores. \code{parallel.cores} should be == -1 or >= 1.}

\item{cl}{parallel cores to be passed to this function.}

\item{...}{(only when \code{mode = "retrain"}) other parameters (except \code{ntree} and \code{mtry}) passed to \code{\link[randomForest]{randomForest}} function.}
}
\value{
If \code{mode = "prediction"}, this function returns a data frame that contains the predicted results.

If \code{mode = "retrain"}, this function returns a random forest classifier.

If \code{mode = "feature"}, this function returns a data frame that contains the extracted features.
}
\description{
This function can predict lncRNA/RNA-protein interactions using RPISeq method.
Both the web-based original version and retrained model are available. Network is required to use
the original version. Model retraining and feature extraction are also supported.
}
\section{References}{

Muppirala UK, Honavar VG, Dobbs D.
Predicting RNA-protein interactions using only sequence information.
BMC Bioinformatics 2011; 12:489
}

\examples{

# Following codes only show how to use this function
# and cannot reflect the genuine performance of tools or classifiers.

data(demoPositiveSeq)
seqRNA <- demoPositiveSeq$RNA.positive
seqPro <- demoPositiveSeq$Pro.positive

# Predicting ncRNA-protein pairs:

Res_RPISeq_1 <- run_RPISeq(seqRNA = seqRNA, seqPro = seqPro, mode = "prediction",
                           label = "Interact", prediction = "web",
                           parallel.cores = 2) # using web server

Res_RPISeq_2 <- run_RPISeq(seqRNA = seqRNA, seqPro = seqPro, mode = "prediction",
                           prediction = "retrained", retrained.model = NULL,
                           parallel.cores = 2) # using default rebuilt model

# Train a new model:

# Argument "label" which indicates the class of each input pair is required here.
# "label" should correspond to the classes of "seqRNA" and "seqPro".
# "positive.class" should be one of the classes in argument "label" or can be set as "NULL".
# In the latter case, the first label in "label" will be used as the positive class.
# Parameters of random forest, such as "nodesize", can be passed using "..." argument.

RPI_model <- run_RPISeq(seqRNA = seqRNA, seqPro = seqPro, mode = "retrain",
                       label = rep(c("Interact", "Non.Interact"), each = 10),
                       positive.class = "Interact", folds.num = 5,
                       ntree = 300, seed = 1, parallel.cores = 2, nodesize = 2)

# Predicting using new built model by setting "retrained.model = RPI_model":

Res_RPISeq_3 <- run_RPISeq(seqRNA = seqRNA, seqPro = seqPro, mode = "prediction",
                           prediction = "retrained", retrained.model = RPI_model,
                           label = rep(c("Interact", "Non.Interact"), each = 10),
                           parallel.cores = 2)

# Only extracting features:

RPISeq_feature_df <- run_RPISeq(seqRNA = seqRNA, seqPro = seqPro, mode = "feature",
                                label = "Interact", parallel.cores = 2)

# Extracted features can be used to build classifiers using other machine learning
# algorithms, which provides users with more flexibility.

}
